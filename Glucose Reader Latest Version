{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"16ctObOVRIgKql3fVWgDCjnDB4aXtWIJ3","timestamp":1689285117894},{"file_id":"1RdGIzGrEzZbTC5igPStFDe-5TzMxNIPx","timestamp":1689277115717},{"file_id":"1m2yvOj7qbm7pVNE45t-EVJPm0ArsDEgK","timestamp":1688154633219},{"file_id":"1W7mvlod2I3AhiciWoTUV88JWWKbJ0Lb3","timestamp":1688142010850},{"file_id":"1SFv4Wdc3mVRVocnHQkFxaRxpIXHNsffM","timestamp":1688090842505},{"file_id":"1NuI4BLfEJaeVVj3RKdGbJQidaoXUYNzl","timestamp":1688089774896}],"authorship_tag":"ABX9TyOBFiGf4EgdfBc9SzLu620U"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"v-5vhXkJqlmM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689433624222,"user_tz":240,"elapsed":3903,"user":{"displayName":"Niharika Adepu","userId":"09078620058083361293"}},"outputId":"eb170d34-52c3-46c7-9ef8-2a7724da64ab"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: opencv-python in /usr/local/lib/python3.10/dist-packages (4.7.0.72)\n","Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from opencv-python) (1.22.4)\n"]}],"source":["pip install opencv-python"]},{"cell_type":"code","source":["!pip install pytesseract"],"metadata":{"id":"DnTHyFSoryvb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689433630293,"user_tz":240,"elapsed":6077,"user":{"displayName":"Niharika Adepu","userId":"09078620058083361293"}},"outputId":"e1aa33f7-31ea-4d34-a7b9-818ee508d748"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pytesseract\n","  Downloading pytesseract-0.3.10-py3-none-any.whl (14 kB)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from pytesseract) (23.1)\n","Requirement already satisfied: Pillow>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from pytesseract) (8.4.0)\n","Installing collected packages: pytesseract\n","Successfully installed pytesseract-0.3.10\n"]}]},{"cell_type":"code","source":["!apt install libtesseract-dev"],"metadata":{"id":"v6LKChanr1jP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689433638325,"user_tz":240,"elapsed":8035,"user":{"displayName":"Niharika Adepu","userId":"09078620058083361293"}},"outputId":"74fa755f-624e-4760-8f42-c5880e95b901"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","The following additional packages will be installed:\n","  libarchive-dev libleptonica-dev\n","The following NEW packages will be installed:\n","  libarchive-dev libleptonica-dev libtesseract-dev\n","0 upgraded, 3 newly installed, 0 to remove and 15 not upgraded.\n","Need to get 3,343 kB of archives.\n","After this operation, 15.7 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libarchive-dev amd64 3.4.0-2ubuntu1.2 [491 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu focal/universe amd64 libleptonica-dev amd64 1.79.0-1 [1,389 kB]\n","Get:3 http://archive.ubuntu.com/ubuntu focal/universe amd64 libtesseract-dev amd64 4.1.1-2build2 [1,463 kB]\n","Fetched 3,343 kB in 0s (8,168 kB/s)\n","Selecting previously unselected package libarchive-dev:amd64.\n","(Reading database ... 123105 files and directories currently installed.)\n","Preparing to unpack .../libarchive-dev_3.4.0-2ubuntu1.2_amd64.deb ...\n","Unpacking libarchive-dev:amd64 (3.4.0-2ubuntu1.2) ...\n","Selecting previously unselected package libleptonica-dev:amd64.\n","Preparing to unpack .../libleptonica-dev_1.79.0-1_amd64.deb ...\n","Unpacking libleptonica-dev:amd64 (1.79.0-1) ...\n","Selecting previously unselected package libtesseract-dev:amd64.\n","Preparing to unpack .../libtesseract-dev_4.1.1-2build2_amd64.deb ...\n","Unpacking libtesseract-dev:amd64 (4.1.1-2build2) ...\n","Setting up libleptonica-dev:amd64 (1.79.0-1) ...\n","Setting up libarchive-dev:amd64 (3.4.0-2ubuntu1.2) ...\n","Setting up libtesseract-dev:amd64 (4.1.1-2build2) ...\n","Processing triggers for man-db (2.9.1-1) ...\n"]}]},{"cell_type":"code","source":["!apt install tesseract-ocr"],"metadata":{"id":"sPviZdqar4ED","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689433645287,"user_tz":240,"elapsed":6973,"user":{"displayName":"Niharika Adepu","userId":"09078620058083361293"}},"outputId":"f00b4b01-619f-42aa-a42a-dd87390f20f4"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","The following additional packages will be installed:\n","  tesseract-ocr-eng tesseract-ocr-osd\n","The following NEW packages will be installed:\n","  tesseract-ocr tesseract-ocr-eng tesseract-ocr-osd\n","0 upgraded, 3 newly installed, 0 to remove and 15 not upgraded.\n","Need to get 4,850 kB of archives.\n","After this operation, 16.3 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 tesseract-ocr-eng all 1:4.00~git30-7274cfa-1 [1,598 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu focal/universe amd64 tesseract-ocr-osd all 1:4.00~git30-7274cfa-1 [2,990 kB]\n","Get:3 http://archive.ubuntu.com/ubuntu focal/universe amd64 tesseract-ocr amd64 4.1.1-2build2 [262 kB]\n","Fetched 4,850 kB in 0s (11.9 MB/s)\n","Selecting previously unselected package tesseract-ocr-eng.\n","(Reading database ... 123236 files and directories currently installed.)\n","Preparing to unpack .../tesseract-ocr-eng_1%3a4.00~git30-7274cfa-1_all.deb ...\n","Unpacking tesseract-ocr-eng (1:4.00~git30-7274cfa-1) ...\n","Selecting previously unselected package tesseract-ocr-osd.\n","Preparing to unpack .../tesseract-ocr-osd_1%3a4.00~git30-7274cfa-1_all.deb ...\n","Unpacking tesseract-ocr-osd (1:4.00~git30-7274cfa-1) ...\n","Selecting previously unselected package tesseract-ocr.\n","Preparing to unpack .../tesseract-ocr_4.1.1-2build2_amd64.deb ...\n","Unpacking tesseract-ocr (4.1.1-2build2) ...\n","Setting up tesseract-ocr-eng (1:4.00~git30-7274cfa-1) ...\n","Setting up tesseract-ocr-osd (1:4.00~git30-7274cfa-1) ...\n","Setting up tesseract-ocr (4.1.1-2build2) ...\n","Processing triggers for man-db (2.9.1-1) ...\n"]}]},{"cell_type":"code","source":["import cv2\n","import pytesseract\n","import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from google.colab.patches import cv2_imshow"],"metadata":{"id":"DH4z3ezlrQN8","executionInfo":{"status":"ok","timestamp":1689433646207,"user_tz":240,"elapsed":923,"user":{"displayName":"Niharika Adepu","userId":"09078620058083361293"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n","imageType = list(uploaded.keys())[0]\n","\n","image = cv2.imread(imageType)\n","img = plt.imread(imageType)\n","plt.imshow(img)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"UmBVpIMAsItf","executionInfo":{"status":"ok","timestamp":1689434547631,"user_tz":240,"elapsed":10422,"user":{"displayName":"Niharika Adepu","userId":"09078620058083361293"}},"outputId":"a34d8805-25b3-4aa9-cc9f-e43d80f3e432"},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-45081d62-d0a3-4270-94ac-0fdf18bcd35f\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-45081d62-d0a3-4270-94ac-0fdf18bcd35f\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving test107.png to test107 (2).png\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7d0f9f4f08b0>"]},"metadata":{},"execution_count":23},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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85GVlQXA/EensrIy/DspKSkJaWlprh8iIiJqunydfOTk5CArK8tVSrimpgbr169HXl6eny9FREREcarBt10OHDiAzz//PNzetm0bNm7ciHbt2qFr166YNm0a7rvvPvTo0SP8p7bZ2dkYPXq0n/tNREREcarBk4/3338f//Zv/xZuf5fXGD9+PBYuXIiZM2fi4MGDmDRpEqqqqjB8+HC88cYbMVnjg4iIiILX4MnHhRdeeMKwTEJCAu69917ce++9J7VjQbEJc9quUigDTFoIUvbRntum8FQ0A0s2xyv7fP/bsO/86U9/crUPHjxo9HnkkUdc7dTUVKOPTYEkLZgnizjNmjXL6CPDir/+9a+NPjNnzjzhawPABx984GprfzIeiyvWeqEdvwxBaiHM7t27u9pakcIrr7zS1X7rrbeMPm+//barfeONNxp9LrjgAmObDMVqAWh5HWn/0/T3v//d1ZZF6ADgF7/4hat9/fXXG3201XAXL17sau/du9foI68Zm9C4TWi7sa9Fm+J9WtE3eUv/2muvNfpon/NTp051tc8880yjz69+9StXOyMjw+ijrVYt2Vx7NkHioP8tiCau7UJERESB4uSDiIiIAsXJBxEREQWq0YuMNTabe2haH6+LANnce/VaHMwv8l60di9427ZtrvaiRYuMPnLFY1nQCzAXamrbtq3Rx2Y8tD7yuTds2GD0qa2tjfg8hYWFrvZvf/tbo89//dd/udp/+9vfjD779u0ztsmiRVqRNb/uxctCaFqWxub61K49+bjTTjvN6CNzD7IQF2CO29NPP2302blzp6s9fPhwo8/QoUONbTLPoWWy5H13LZch802rVq2K2Od3v/ud0Wf69OnGNpl5WrBggdFHVovWiqXJc2STbfNa4M7m89HmPaxd5zIrMWjQIKOPXDNMy3/NmzfP2CaLBVZVVRl9ZEG59PR0o4/k9d+LaC4WGov4zQcREREFipMPIiIiChQnH0RERBQoTj6IiIgoUKd84NSGn4HTaAWGvAZQtcfJ4NeWLVuMPjIIuGLFCqOPDFh269bN6COLKMlVbm1p4ypXENYCdYcPH3a1ly5davSRIVCbQmRakS1ZHAsw91sLBsoAnU0A1eY6017LpoCY9jgZFJar0wLAz372M1f7xRdfNPrI4LIMVwJmSFeeQ0APisoCVdpKvHJstQCwLCCnneuysjJX+7777jP6TJs2zdgmw81akTO5Gq4WlJT7pF378hrRAshew85ePo+0Yx08eLCrPXHiRKOP3EftulqzZo2xTV432jUjt2l9bN4fcjxsViK2HcN4DaHymw8iIiIKFCcfREREFChOPoiIiChQzHzEKS+Ft2zvIVZWVrraL7zwgtFHFhCTxbo02utr91C90MZDLt6kFR+S+6Tdv1+5cqWrLRejA4AJEya42jfffLPRp3PnzsY2eb9Yu+8ucwc2Y6aNh00RKe0caeMmnXXWWa62trCbvO++cOFCo095ebmrrR1HSkqKq22zOCNg3ovXzrVNcSy5TXseWcDss88+M/rIRRUBsxDf1VdfbfSRBd22b99u9JHXjDYeckE0m+vDdnFEm0XSbDIOY8eOdbXbtGlj9JGF2LR8h7b4mzyPXjMf8vht3nuNvYhfLOA3H0RERBQoTj6IiIgoUJx8EBERUaA4+SAiIqJAMXCqaOyiLV6Colofm+eRqzYCZqGnl156yegjVxbVVkOVAT8tZCX7+LlarywyZvPcWnhQFpV6/vnnjT7t27d3ta+55hqjz5lnnmlsk8FEbYzkPmkBUJugpNfryIYM1L355ptGHxmw/OabbyI+r3asNkWdvBbMsilMJ8+HTWE47f3x8ccfG9vuvvtuV3vu3LlGnxtuuMHVlsFqwAyc2hQT1HgNrct+2jjKbXJFX8AMv//hD38w+qxdu9bVPnjwoNFHe1/brPwrt9msDqy99+T12Nj/xsQCfvNBREREgeLkg4iIiALFyQcREREFipMPIiIiChQDp02YTaipurra2LZ69WpXW648C5hBSS0YKLfZVOb0upKjFp7TgmeSTShWhve+/vpro88XX3wR8bU6duwY8bnliq2AOY42K5TanHvbUKY8b1p4cvfu3a72l19+afSRAVMtvGdzXuV+2zyPtk07/nbt2rna2rn+6quvXG2b6p3aOdPeM/L9qAXC+/bt62prxyEDli1btjT62Fz7XldQtjl++dxy7AHzOtqwYYPRZ8+ePa62/GwCgNNOO83YJsOs0eR1xdqmjN98EBERUaA4+SAiIqJAcfJBREREgWLmIw54WcH2ZMh70bLwEgAkJye72tpqkzJzIR8DAOnp6R720KTdm66qqorYx0uRM+0euzy21q1bG32SkpKMbV6KOPl1rg8fPmxs08ZInlubjIW2yrGX4mDa/sjMiTYe2uNs7rvLfJOWVdBWSJXkPtkUhtO2adeMzHNo+yNzDza5DK85BL+uWS1LJI9NK0Qmj1XLlu3bt8/YZrMaLUUPv/kgIiKiQHHyQURERIHi5IOIiIgCxckHERERBYqB0ybCJlBmU4wI0MNxkgyhauFBmyCaLH7k52qsNoFTSQsYytCf9lry+LUCZ9oYyeOPZuDUJsyokWOiXTM2AUtJCwZq16hkE5TUXl/ut/Y4WeTtn//8p9FHnlvttWyK8Nm8vjYeMiisBbnltWazOrDNaqy2vFzHWrB9//79J2wD5vtaGw+b975W4E++R7RQrKSNmU1hvFMNv/kgIiKiQHHyQURERIFq0OSjqKgIgwYNQmpqKjp27IjRo0ejrKzM1efIkSMoLCxERkYGUlJSUFBQEGgNfSIiIoptDcp8vPPOOygsLMSgQYPw7bff4s4778Qll1yCzZs3hwsRTZ8+HStWrMDSpUsRCoUwZcoUjBkzBmvXro3KAdC/eM1KaIWm5L14m+fR7t/Lx2kZA7lNOw6bAk3aPV25AJiWVbBZ7E720QqqZWdnu9ravWFtwSu5334tOGWTC7FZEE2j3a+W/4Px2WefGX3k+Gv5Gpt76vLYtPNhk0HSrhm5uJn2/tAWWpTksdoskAeYxem0a8Ym8+JlQbhoFtnyel3JImM216x27Nq1Jh/Xvn17o4/MgWj76OU9bHMcXj8LvL73vRQ8PBkNmny88cYbrvbChQvRsWNHlJaW4oILLkB1dTWeeuopLF68GCNGjAAALFiwAD179sS6deswdOhQ//aciIiI4tJJZT6+W/75u/9bKC0txbFjx5Cfnx/uk5ubi65du6KkpER9jrq6OtTU1Lh+iIiIqOnyPPmor6/HtGnTMGzYMPTq1QsAUFFRgcTERGO9jszMTFRUVKjPU1RUhFAoFP7p0qWL110iIiKiOOB58lFYWIhNmzZhyZIlJ7UDs2bNQnV1dfinvLz8pJ6PiIiIYpunImNTpkzBq6++ijVr1qBz587h7VlZWTh69Ciqqqpc335UVlYiKytLfa6kpCTrYkd0crQglrb6qCz2YxNO0gJdUigUMrbZBAxtaMHRuro6V9tmHzXy+LUiRrJYmMavIJhfbIOKMmSnhe7k+GsrrcrXswlJa/sjx1r7/NCuK5vCTjIoeuDAAaOPDKF6PWdaH3ltaccmg6peA6deC4hJfhXG095D8vNJK0QmX9+mwJ22T1rgVO6TNq42q+PKzx6vn0VNSYOuPsdxMGXKFCxbtgyrVq1CTk6O6/cDBgxAy5YtUVxcHN5WVlaG7du3Iy8vz589JiIiorjWoP/tLCwsxOLFi/HKK68gNTU1nOMIhUJo1aoVQqEQJk6ciBkzZqBdu3ZIS0vD1KlTkZeXx790ISIiIgANnHzMmzcPAHDhhRe6ti9YsADXXXcdAODhhx9Gs2bNUFBQgLq6OowcORJz5871ZWeJiIgo/jVo8mFzby85ORlz5szBnDlzPO8UNZzXXIZf97Rtro22bdsa2/zKfMh8B2BXLM1LDsMm82Gb0/CrkE80CwLZFD+S42+T+dDOvbxGtdeSY60V4rJZJM1mQTotEyXfH1oOwGsBL3ltaTkIm+NobF5yINoYfVfO4Tta0Tev+yMzQNrnk+yjfYba5GuiVUwwnnFtFyIiIgoUJx9EREQUKE4+iIiIKFCcfBAREVGg/En7UaPzWsAqmkWU5OO0ImNaWFDSgony9bXCQlroMRKbY9X2Wa6sqhW00sbMJqzmhdeVNW362QQ1tfNhUwzKSzGqlJQUT89js7KozarPfhaBs1lF9VQiP59sVweWtHMtH2dTBFF7fS/hUa8rSjcl/OaDiIiIAsXJBxEREQWKkw8iIiIKFDMfTZi8P6ndG9WKKMmshM3CVdpzyz7aPVWb4lw299TlgmCAvthcpOe2ue+qFX6SORDbRbtsFluL9Bhtm9c+Nq9ncz34mTmR5Fhri695PX45/lpuSBaaslkgz/ZYvWQ+orXwYNC097AsXqe9r7y8hwFzbG2yQ14LLnpdaLAp4zcfREREFChOPoiIiChQnHwQERFRoDj5ICIiokAxcBoHvAaYZAhQC6/JVSOB6AU1bVaN9EoLBtoEZ70UKGrdurXRR4YgbVZVjSa/ViK2Ja81mwJi2njIMKfWR4YytQCwV3JMDh06ZPSxeX9ItmFCm2OTz2Wzqm480N7DNitTy2vEJgAMmAXEtPe1pIViba4/r6scN2X85oOIiIgCxckHERERBYqTDyIiIgoUJx9EREQUKAZOY5AMR3ldydEm5KQF6mSoSnucDIrKoCBgHkdqamrEPrbkPtlUOLUJq9lUxtQqasrQmdfVL/3q42dFRXlutWOT27Q+2urEkV5LCyTL8bd5Xm2fbI5DVtjU9lHjNVAoA6fa+9zm88EmyO21Cmu0aCsI23wW+bWqrfa+lmwCwH5VAG7q+M0HERERBYqTDyIiIgoUJx9EREQUKGY+4oBNDkEj7/tquQgth9GmTRtXW7sXK+9havdi5fO0b98+4vPYHqvN/VpZ+Cs5OdnoY5OLkc+dkZFh9GnXrp2rrRWi0rbZ5Ae83tP2Qjt+mzyLfJw21mlpaa72/v37I+6Pdl47dux4wufV9gewWyFV9tHOmcxleCnKB+hjlJ2dHfFx8prxeu6jufKwFzY5KW3MZB8t76KdI3ndaNeDzeeMTbbMy+rVTR2/+SAiIqJAcfJBREREgeLkg4iIiALFyQcREREFioHTGGRTRMgmKKk9Tho0aJCx7fzzz3e1S0pKjD4yZCWDcgAwatQoV7tnz54R91ELYNoUWdPCrJdeeqmrvW3bNqPP3r17XW0trNanT58TPi9ghlDT09ONPjYFqxp75VuNDJxqK9Z2797d1f7pT39q9Fm0aJGrLQPJ2nMPGDDA6HPJJZe42qFQyOijXTMygKxda/J9JM89APTr18/V/vjjj40+MqStBbvlcQBA//79XW2tqJVN2NtLUNRrsN2v8KQW5pSfIR999JHRZ8uWLa62dn1269bN2HbxxRe72l27djX62BQhtPmcjbWCbrGA33wQERFRoDj5ICIiokBx8kFERESBYuYjDtjc09WyAjKXoeUZ+vbta2y76aabTvhaALBnzx5XW7vHP3bsWFc7KyvL6CPvl2qF0GyKjMnCTwDwy1/+0tXWFiB78sknXe22bdsafa699lpXOz8/3+gjMx/acWjbtHv6UrQKFGnjod2/PnLkiKut7XNOTo6rfcMNNxh9amtrXe2VK1cafXr37u1qX3nllUafwYMHu9raOdPYFHQ7cOCAq33RRRcZfeT7aN68eUafsrIyV3v48OFGn4kTJxrbunTpcsLXAuze+5JfuRCN9jxerlHtOOS4TZo0yegjx18rKDZmzJiI21JSUiLuk/bc8j1jsxgg8ZsPIiIiChgnH0RERBQoTj6IiIgoUA2afMybNw99+vRBWloa0tLSkJeXh9dffz38+yNHjqCwsBAZGRlISUlBQUEBKisrfd9pIiIiil8NCpx27twZDz74IHr06AHHcfDMM8/giiuuwIcffohzzz0X06dPx4oVK7B06VKEQiFMmTIFY8aMwdq1a6O1/zEtyFUjbQrdaLTiRyNGjHC1tZUk5YqkMgQIAJmZma62DC4CZmEhLQSphbxkoE0rLNS6dWtX+7rrrjP6yEJX2vmQoTdtzGQBK9kG9OO3CatJfl1XtgWTbAKvMkwrg5MAMHnyZFdbKzrXuXNnV1sGUAHzepTnGdALuslrRLvWbK4HWYRPO9cffPCBqy2LhwF6AFsei9frQW7TjlUGcG2KGdryUlRLC2TL/dYKs0namPXq1cvYJoPK2hjJ4/dSUOyHtp3qGjT5uPzyy13t+++/H/PmzcO6devQuXNnPPXUU1i8eHH4H68FCxagZ8+eWLduHYYOHerfXhMREVHc8pz5OH78OJYsWYKDBw8iLy8PpaWlOHbsmOvPEHNzc9G1a1e1PPd36urqUFNT4/ohIiKipqvBk49PPvkEKSkpSEpKwuTJk7Fs2TKcc845qKioQGJiorGmRWZmJioqKn7w+YqKihAKhcI/2te1RERE1HQ0uMjY2WefjY0bN6K6uhovvfQSxo8fj3feecfzDsyaNQszZswIt2tqajgBEWzuu9oU4rJ9nHw9Lc8h7xdr973lvXktKyG/6dIKQWmZE0krxiQzFtric9dcc80J90ejFTSTr6Udh/Y4m0Xb5HP5lfmwKboFmGOrPbe8X66dj9zcXFdbW+xLBtS1BfrkOFZXVxt9tIJR8jrSMgY2WSL5+lohsrPPPvuErw0Ahw4dMrbJDJTX97DXDJgXXjMOso92Pcrx1xYjHD16tKutjauWt5LvPW1hO7lPNgt4an1ssiOnWi6kwZOPxMREnHnmmQD+teLkhg0b8Mgjj+DnP/85jh49iqqqKtcHRmVlpRqs+k5SUpJ60omIiKhpOuk6H/X19airq8OAAQPQsmVLFBcXh39XVlaG7du3Iy8v72RfhoiIiJqIBn3zMWvWLIwaNQpdu3ZFbW0tFi9ejNWrV2PlypUIhUKYOHEiZsyYgXbt2iEtLQ1Tp05FXl4e/9KFiIiIwho0+di1axeuvfZa7Ny5E6FQCH369MHKlStx8cUXAwAefvhhNGvWDAUFBairq8PIkSMxd+7cqOw4ERERxacEJ8ZSLjU1NQiFQqiurkZaWlpj785JiWYxKL+eWyusI0NeWhBM5nS0YJ6krYYqi5VpATtt28GDB11t7VqRIVhtH2XAVAtKyrCYFnqzCc/ZFHqyCQDbXA825147Vm2bHDctvCdfTwsgy3OmBT47derkapeXlxt95LnWMmPaccgVa7XrSj5OC4oePnzY1dbOq8350I5f7pPNc2tkYT6b5/EaUvWrqJbN+dDGTO63bYE/+Xra69uEsuX7Q3se+ZmxY8cOo8/tt9/uar/22msRXxvwtspxtAtg2vz7zbVdiIiIKFCcfBAREVGgOPkgIiKiQHHyQURERIFqcJExig02VU9lEEoLfGorxsow1Ouvv270kZUnR44cafSRlSC10JcM9GlhMS1kdqLCdd+RwcA333zT6PPqq6+62gUFBUafH/3oRxH3R46tFtbSQpBy/G2qI/rFpqIkYB6LVqlVjol2rJ999pmrvWzZMqOPrDh73nnnGX1sqslq17Xcb+1x8li18ZDnQ3stm+tBCwbK8KT23JI21pGeFzCPQ7vObEKHXisw26yWLD8ftADy008/7Wqfc845Rp+f/vSnEffRtuJvJF4rnJ5q+M0HERERBYqTDyIiIgoUJx9EREQUKGY+FEHWXbMpKmXzOJvVFrX717t37za2Pfvss672448/bvSR98/LysqMPhMmTHC1O3bsaPSRbI4DMAtGaffGZaZg3rx5Rp/NmzefsA0A99xzj6s9fPhwo4+8f69lV2xWg/V6Pdi8lmSTOdC2affGZR+ZpQGABx54wNX++OOPjT5bt251tadMmWL0kassa2OtjZnMRtgcq00GxmYcvX6m2DzOJs8RTV4zDjbFwb766itXe86cOUafF1980dXu0KGD0efrr782tl133XWutlZQzss4ateDlyKATR2/+SAiIqJAcfJBREREgeLkg4iIiALFyQcREREFioHTOOC1iI8M2FVXVxt9XnrpJWPb/PnzXW258ixgFvDSQqmpqamu9i233GL0kcemFSLTQn8ynPbKK68YfWbPnu1qyzAjYAY+N2zYYPSRxxYKhYw+AwYMcLXr6uqMPlroTh6Hdh69FCTyGji0KQalrSJbUlLiaj/22GNGn08//dTVltcHALz11luutlbQbdq0aa72hRdeaPTRxkxeRzahVJtCZH6GOxuz8Fc0Q7EaOdZ79+41+sj38IoVK4w+crVk2QaABQsWRNyfm266ydhmM45eP5+9aEpBVX7zQURERIHi5IOIiIgCxckHERERBYqZjzjgtYiQzDNUVFQYfV5++WVjW2Vl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VOujkeOvBQPlc7EKanBuueUWY1tVVZWrXVpaavSRn4Xa54z2GWLDZvVwm8/rSI+xfVxTwm8+iIiIKFCcfBAREVGgGjT5+N3vfoeEhATXT25ubvj3R44cQWFhITIyMpCSkoKCggJUVlb6vtNEREQUvxqc+Tj33HPx1ltv/d8TfO8e6fTp07FixQosXboUoVAIU6ZMwZgxY7B27Vp/9pbC5L1p7V6kLKrUv39/o4/MZQDmfe6lS5cafWSmQSsGJbdp92IjvTZgV6DHptCTdt932LBhrvbkyZONPvK+8zPPPGP0Wb9+vaut7bPNipjaGNmsDuxXDkHmKQAzz7N7926jz0UXXeRqT5061egzZ84cV1tmQAC761pu08bapuiezTj61acpsymUaDMe5513nrFt5syZrrb23lu1apWrra3erX2uyGs9yCKV0bxmvGZHbD5n/NTgyUeLFi2QlZVlbK+ursZTTz2FxYsXY8SIEQCABQsWoGfPnli3bh2GDh168ntLREREca/BmY+tW7ciOzsb3bt3x7hx48LJ/9LSUhw7dgz5+fnhvrm5uejatStKSkp+8Pnq6upQU1Pj+iEiIqKmq0GTjyFDhmDhwoV44403MG/ePGzbtg0/+tGPUFtbi4qKCiQmJhpf0WZmZqKiouIHn7OoqAihUCj806VLF08HQkRERPGhQbddRo0aFf7vPn36YMiQIejWrRtefPFFz39HPWvWLMyYMSPcrqmp4QSEiIioCTupImPp6ek466yz8Pnnn+Piiy/G0aNHUVVV5fr2o7KyUs2IfCcpKclqdcGmyms4yKY4lU3BJm2ip61+K73wwguutjb5lNtsVrXVaM/dvn17VzstLc3oI8dIhksBs7CRdttPhtw2btxo9JFFz7TzYRMy83o9eAmHaa+lrfwqVxL9y1/+YvSRxequv/56o88dd9zhat97771Gn6+//trV1oLM8vNCu65s2Jwj7fqMZhCvqazMbUOeN/keAv71bfv3aStDy8+HV155xejTunXriNv8KvLlNUzqtY9f+x104PSk6nwcOHAAX3zxBTp16oQBAwagZcuWKC4uDv++rKwM27dvR15e3knvKBERETUNDfrm49e//jUuv/xydOvWDTt27MA999yD5s2b4+qrr0YoFMLEiRMxY8YMtGvXDmlpaZg6dSry8vL4ly5EREQU1qDJx9df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NEnl5eW49dZb8eabbyI5Obmxd6dJq6+vx8CBA/HAAw8AAPr164dNmzZh/vz5GD9+fCPvXdPy4osv4rnnnsPixYtx7rnnYuPGjZg2bRqys7M51tQgMXfbpX379mjevLmR+q+srERWVlYj7VXTMmXKFLz66qt4++230blz5/D2rKwsHD16FFVVVa7+HPuGKy0txa5du9C/f3+0aNECLVq0wDvvvINHH30ULVq0QGZmJsfaJ506dcI555zj2tazZ09s374dAMLjyc+Uk3fbbbfhjjvuwFVXXYXevXvjl7/8JaZPn46ioiIAHOtosRnXrKws7Nq1y/X7b7/9Fvv27YvJsY+5yUdiYiIGDBiA4uLi8Lb6+noUFxcjLy+vEfcs/jmOgylTpmDZsmVYtWoVcnJyXL8fMGAAWrZs6Rr7srIybN++nWPfQBdddBE++eQTbNy4MfwzcOBAjBs3LvzfHGt/DBs2zPiT8S1btqBbt24AgJycHGRlZbnGuqamBuvXr+dYN9ChQ4fQrJn7n43mzZujvr4eAMc6WmzGNS8vD1VVVSgtLQ33WbVqFerr6zFkyJDA9zmixk68apYsWeIkJSU5CxcudDZv3uxMmjTJSU9PdyoqKhp71+LazTff7IRCIWf16tXOzp07wz+HDh0K95k8ebLTtWtXZ9WqVc7777/v5OXlOXl5eY24103H9//axXE41n557733nBYtWjj333+/s3XrVue5555zWrdu7Tz77LPhPg8++KCTnp7uvPLKK87HH3/sXHHFFfzzTw/Gjx/vnHbaaeE/tX355Zed9u3bOzNnzgz34Vh7U1tb63z44YfOhx9+6ABwHnroIefDDz90vvrqK8dx7Mb10ksvdfr16+esX7/eeffdd50ePXrwT20b6s9//rPTtWtXJzEx0Rk8eLCzbt26xt6luAdA/VmwYEG4z+HDh53/9//+n9O2bVundevWzs9+9jNn586djbfTTYicfHCs/fM///M/Tq9evZykpCQnNzfXeeKJJ1y/r6+vd+666y4nMzPTSUpKci666CKnrKyskfY2ftXU1Di33nqr07VrVyc5Odnp3r2785vf/Mapq6sL9+FYe/P222+rn8/jx493HMduXPfu3etcffXVTkpKipOWluZMmDDBqa2tbYSjiSzBcb5Xmo6IiIgoymIu80FERERNGycfREREFChOPoiIiChQnHwQERFRoDj5ICIiokBx8kFERESB4uSDiIiIAsXJBxEREQWKkw8iIiIKFCcfREREFChOPoiIiChQnHwQERFRoP4/+wleZyL2Jl4AAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["#recognizes image\n","image1 = cv2.imread(imageType)\n","#converts to grayscale\n","img = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)\n","#applies threshold\n","ret, thresh3 = cv2.threshold(img, 120, 255, cv2.THRESH_TRUNC)\n","# Gaussian Blur (9, 75, 75)\n","Gaussian3 = cv2.bilateralFilter(thresh3, 9, 75, 79)\n","cv2_imshow(Gaussian3)\n","# De-allocate any associated memory usage\n","if cv2.waitKey(0) & 0xff == 27:\n","    cv2.destroyAllWindows()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"rzyIYxh-Crwm","executionInfo":{"status":"ok","timestamp":1689434552561,"user_tz":240,"elapsed":134,"user":{"displayName":"Niharika Adepu","userId":"09078620058083361293"}},"outputId":"10ce9426-0699-46d3-df00-4c7f94394a80"},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=L size=109x64 at 0x7D0F9F4C9810>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["# Number:\n","number3 = pytesseract.image_to_string(Gaussian3, lang='eng', config='--psm 7 outputbase digits tessedit_char_whitelist 0123456789')\n","print(number3)\n","# waiting until key press\n","cv2.waitKey()\n","# destroy all the windows\n","cv2.destroyAllWindows()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mHiphCLJJAR9","executionInfo":{"status":"ok","timestamp":1689434557170,"user_tz":240,"elapsed":291,"user":{"displayName":"Niharika Adepu","userId":"09078620058083361293"}},"outputId":"d7117904-493f-4ca2-e8b5-20badf3172d9"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["\f\n"]}]},{"cell_type":"code","source":["# Results:\n","print(\"Result:\", number3)\n","if int(number3) <= 99:\n","  print(\"Thank you for taking the test! All is good!\")\n","elif int(number3) > 99 and int(number3) < 125:\n","  print(\"Thank you for taking the test! Your results show that you have prediabetes. Bubble Health recommends that you see a doctor for further consultation.\")\n","elif int(number3) >= 126:\n","  print(\"Thank you for taking the test! Your results show that you have diabetes. Bubble Health recommends that you see a doctor for further consultation.\")\n","else:\n","  print(\"Please enter another image\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HSf4foOusq0n","executionInfo":{"status":"ok","timestamp":1689433880210,"user_tz":240,"elapsed":142,"user":{"displayName":"Niharika Adepu","userId":"09078620058083361293"}},"outputId":"2a288d30-8e32-4c22-8a60-c8fb57a4ef75"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Result: 1234561890\n","\f\n","Thank you for taking the test! Your results show that you have diabetes. Bubble Health recommends that you see a doctor for further consultation.\n"]}]}]}